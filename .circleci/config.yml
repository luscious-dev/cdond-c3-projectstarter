version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>-stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>-stack
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            cd ~/project/backend
            SUCCESS=$(curl --insecure  https://kvdb.io/QT1vNS2DU9WjHfk9D92e6Y/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if(($SUCCESS==1)); 
            then
              npm install
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
            
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
            
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}-stack" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}-stack" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > inventory.txt
            export BACKEND_IP=$( \
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text \
            )
            echo "http://$BACKEND_IP:3030" >> .circleci/output/backend_url.txt
            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/output/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a3:43:7a:d7:33:ce:cd:68:d8:e6:16:8d:9e:65:e8:ea"]
      
      - attach_workspace:
          at: ~/tmp
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            apk --no-cache add --virtual builds-deps build-base python3
            pip install --upgrade pip && pip install --upgrade awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i ~/tmp/project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Python
          command: |
            sudo apt update
            sudo apt install python3.9
            sudo apt install python3-pip
      - run: 
          name: Install aws cli
          command: sudo pip3 install awscli --force-reinstall --upgrade
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration results to memstash
          # Memstash does not seem to be available. So i'll use kvdb instead
          command: |
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/QT1vNS2DU9WjHfk9D92e6Y/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install sudo, tar, gzip, curl
          command: |
            yum install sudo -y
            yum -y install tar gzip
            yum makecache
            yum install curl.x86_64
      - run:
          name: Install Nodejs and NPM
          command: |
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_13.x |sudo -E bash -
            sudo yum install -y nodejs
      - attach_workspace:
          at: ~/tmp

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations       
                    
  deploy-backend:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["a3:43:7a:d7:33:ce:cd:68:d8:e6:16:8d:9e:65:e8:ea"]
      # attach workspace
      - attach_workspace:
          at: ~/tmp
    
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            apk add --no-cache tar gzip curl
            apk add --update nodejs npm
            apk --no-cache add --virtual builds-deps build-base python3
            pip install --upgrade pip && pip install --upgrade awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install --legacy-peer-deps
            npm run build
            rm -rf node_modules
            cd ..
            # zip backend directory
            tar -C backend -czvf backend.tar.gz .
            mkdir -m 755 .circleci/ansible/roles/deploy/files/
            cp backend.tar.gz  .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            ansible-playbook deploy-backend.yml -i ~/tmp/project/.circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install --upgrade pip && pip install --upgrade awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> backend_url.txt
      
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="$(cat backend_url.txt)"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install sudo -y
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_13.x |sudo -E bash -
            sudo yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Fetch old stack workflow id
            command: |
              # your code here
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo "${OldWorkflowID}" >> OldWorkflowID.txt
              cat OldWorkflowID.txt
        
        - run:
            name: Remove old stacks and files
            command: |
              cat OldWorkflowID.txt
              OldWorkflowID=$(cat OldWorkflowID.txt)
              echo $OldWorkflowID
              echo "s3://udapeople-${OldWorkflowID}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                echo "-------------Delete Confirmed!!!-------------"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}-stack"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}-stack"
              fi
                echo "----------Cannot Clean up----------"

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]