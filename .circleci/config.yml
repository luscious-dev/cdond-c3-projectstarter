version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>-stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>-stack
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            cd ~/project/backend
            SUCCESS=$(curl --insecure  https://kvdb.io/QT1vNS2DU9WjHfk9D92e6Y/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if(($SUCCESS==1)); 
            then
              npm install
              npm run migration:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
            
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}-stack" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}-stack" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > inventory.txt
            BACKEND_IP=$( \
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text \
            )
            echo "http://$BACKEND_IP:3030" >> .circleci/back_url.txt
            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:eb:e0:cf:5f:70:c2:ec:22:54:e8:1c:a1:84:0c:6c"]
      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i ~/project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Python
          command: |
            sudo apt update
            sudo apt install python3.9
            sudo apt install python3-pip
      - run: 
          name: Install aws cli
          command: sudo pip3 install awscli --force-reinstall --upgrade
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migration_result.txt
            
      - run:
          name: Send migration results to memstash
          # Memstash does not seem to be available. So i'll use kvdb instead
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_result.txt
            then
            curl https://kvdb.io/QT1vNS2DU9WjHfk9D92e6Y/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/tmp/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      
      - run:
          name: Get backend url
          command: |
            echo project/.circleci/tmp/backend_url.txt
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 sync frontend s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

      - run:
          name: Create API_URL
          command: |
            export API_URL='cat project/.circleci/tmp/backend_url.txt'
            npm run build
      - run:
          name: Build frontend app
          command: |
            cd frontend
            npm run build
            aws s3 cp ./dist s3://dist
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations       
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/node:14.18
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0d:eb:e0:cf:5f:70:c2:ec:22:54:e8:1c:a1:84:0c:6c"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install --user ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook .circleci/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Build file
          command: |
            cd backend
            npm run build

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      # - run:
      #     name: Get backend url
      #     command: |
      #       API_URL=$(echo .circleci/backend_url.txt)
      - run:
          name: Backend smoke test.
          command: |
            curl -s $API_URL/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}-stack.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:14.18
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        # Docker image here
        - image: cimg/node:14.18
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]